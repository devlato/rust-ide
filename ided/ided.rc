#[link(name="rustc", vers="0.8-pre")]
extern mod rustc;
#[link(name="syntax", vers="0.8-pre")]
extern mod syntax;
extern mod extra;

extern mod protobuf;

use std::io;
use std::os;
use std::task;
use ided_proto::*;
use protobuf::MessageUtil;

use rustc::*;
use rustc::driver::driver::*;
use rustc::middle::ty;
use /*rustc::*/ syntax::diagnostic;
use /*rustc::*/ syntax::codemap;
use /*rustc::*/ syntax::visit;
use /*rustc::*/ syntax::visit::*;
use /*rustc::*/ syntax::ast::*;
use /*rustc::*/ syntax::codemap::*;
use extra::getopts;

mod ided_proto;

fn span_to_file_span(span: span, code_map: &CodeMap) -> FileSpan {
    fn char_pos_value(cp: CharPos) -> i32 {
        let CharPos(r) = cp;
        r as i32
    }

    FileSpan {
        beg: Some(char_pos_value(code_map.bytepos_to_local_charpos(span.lo))),
        end: Some(char_pos_value(code_map.bytepos_to_local_charpos(span.hi))),
    }
}

fn span_to_project_span(span: span, code_map: &CodeMap) -> ProjectSpan {
    let file = code_map.span_to_filename(span);
    ProjectSpan {
        file: Some(file.to_owned()),
        span: Some(span_to_file_span(span, code_map)),
    }
}


struct BuildAstVisitor<'self> {
    code_map: &'self CodeMap,
    ast: LazyAst,
}

impl<'self> BuildAstVisitor<'self> {
    fn marker(&mut self, open: bool, span: span, node_type: NodeType, node_id: Option<NodeId>) {
        let mut marker = NodeMarker::new();
        marker.set_open(open);
        marker.set_node_type(node_type);
        if node_id.is_some() {
            marker.set_id(node_id.unwrap() as i32);
        }
        let CharPos(pos) = self.code_map.bytepos_to_local_charpos(match open {
            true  => span.lo,
            false => span.hi,
        });
        marker.set_pos(pos as i32);
        self.ast.markers.push(marker);
    }

    fn open(&mut self, span: span, node_type: NodeType, node_id: Option<NodeId>) {
        self.marker(true, span, node_type, node_id);
    }

    fn close(&mut self, span: span, node_type: NodeType, node_id: Option<NodeId>) {
        self.marker(false, span, node_type, node_id);
    }

    fn span(&mut self, span: span, node_type: NodeType, node_id: Option<NodeId>, cb: &fn(&mut BuildAstVisitor)) {
        let ide_span = span_to_file_span(span, self.code_map);
        self.open(span, node_type, node_id);
        cb(self);
        self.close(span, node_type, node_id);
    }
}

impl<'self> visit::Visitor<()> for BuildAstVisitor<'self> {
    fn visit_mod(&mut self, m: &_mod, s: span, n: NodeId, e: ()) {
        do self.span(s, NodeRoot, Some(n)) |v| {
            walk_mod(v, m, e)
        }
    }

    fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl, b:&Block, s:span, n:NodeId, e:()) {
        do self.span(s, NodeFn, Some(n)) |v| {
            walk_fn(v, fk, fd, b, s, n , e);
        };
    }

    fn visit_stmt(&mut self, s:@stmt, e:()) {
        let node_id = match s.node {
            stmt_decl(_, node_id) | stmt_expr(_, node_id) | stmt_semi(_, node_id) => Some(node_id),
            _ => None,
        };
        do self.span(s.span, NodeStmt, node_id) |v| {
            walk_stmt(v, s, e);
        }
    }

    fn visit_struct_def(&mut self, a:@struct_def, b:ident, c:&Generics, d:NodeId, e:()) {
        walk_struct_def(self, a, b, c, d, e);
    }

    fn visit_ty(&mut self, _t:&Ty, e:()) {
        do self.span(_t.span, NodeTy, Some(_t.id)) |v| {
            walk_ty(v, _t, e);
        }
    }

    fn visit_item(&mut self, item: @item, e: ()) {
        let node_type = match item.node {
            item_struct(*) => Some(NodeStructDef),
            item_ty(*) => Some(NodeTy),
            _ => None,
        };
        match node_type {
            Some(t) => {
                    //printfln!("%?", item.node);
                    do self.span(item.span, NodeStructDef, Some(item.id)) |v| {
                        walk_item(v, item, e);
                    }
                },
            None => walk_item(self, item, e),
        };
    }
}


struct BuildJumpMapVisitor<'self> {
    code_map: &'self CodeMap,
    ctxt: ty::ctxt,
    jump_map: JumpMap,
}

impl<'self> BuildJumpMapVisitor<'self> {
    fn for_ty(&mut self, _t: &Ty) {
        let mut e = JumpMap_Entry::new();
        e.set_source_node_id(_t.id as i32);
        let t = self.ctxt.node_types.find(&(_t.id as uint));
        let path_node_id = match _t.node {
            ty_path(_, _, node_id) => node_id,
            _ => return,
        };
        let d = match self.ctxt.def_map.find(&path_node_id) {
            Some(x) => x,
            None => return,
        };
        let id = match *d {
            def_ty(id) => id.node,
            _ => return,
        };
        e.set_target_node_id(id as i32);
        self.jump_map.add_entries(e);
    }
}

impl<'self> visit::Visitor<()> for BuildJumpMapVisitor<'self> {
    fn visit_ty(&mut self, _t:&Ty, _e:()) {
        self.for_ty(_t);
        walk_ty(self, _t, _e);
    }
}



struct IdeSession {
    coded_input: protobuf::CodedInputStream,
    output: @Writer,
    rust_home: ~str,
}

impl IdeSession {
    fn new() -> IdeSession {
        IdeSession {
            coded_input: protobuf::CodedInputStream::new(io::stdin()),
            output: io::stdout(),
            rust_home: match os::getenv("RUST_HOME") {
                Some(home) => home,
                None => fail!("RUST_HOME env variable must be set"),
            }
        }
    }

    fn analyze(&self, req: &Request_Analyze) -> Response_Analyze {
        use std::comm::*;

        let (p, ch) = stream();
        let ch = SharedChan::new(ch);
        let ch_capture = ch.clone();
        let mut task_builder = task::task();
        task_builder.supervised();

        let rust_home = self.rust_home.clone();
        let req = req.clone();

        match do task_builder.try {
            let ch = ch_capture.clone();
            let ch_capture = ch.clone();

            let errors: @mut ~[Error] = @mut ~[];
            let demitter: @fn(Option<(@codemap::CodeMap, codemap::span)>,
                              &str,
                              diagnostic::level) =
                              |cmsp, msg, lvl| {
                let mut error = Error::new();
                error.set_msg(msg.to_owned());
                match cmsp {
                    Some((code_map, span)) => error.set_span(span_to_project_span(span, code_map)),
                    None => {}
                };
                //(*errors).push(error);
                ch_capture.send(error);
            };

            let matches = &getopts::groups::getopts(
                [
                    ~"me",
                    ~"-L",
                    rust_home + "/lib",
                ], optgroups()).unwrap();
            let options = build_session_options(@"aaa", matches, demitter);
            let mut session = build_session(options, demitter);
            let input = str_input(req.file.get_ref().content.get_ref().to_managed());
            let cfg = build_configuration(session);
            let crate = phase_1_parse_input(session, cfg.clone(), &input);
            let expanded_crate = phase_2_configure_and_expand(session, cfg.clone(), crate);
            let analysis = phase_3_run_analysis_passes(session, expanded_crate);
            let node_types = analysis.ty_cx.node_types;
            let ast_map = analysis.ty_cx.items;

            let ast_tmp = LazyAst::new();
            let mut build_ast_visitor = BuildAstVisitor {
                code_map: session.codemap,
                ast: ast_tmp,
            };
            visit::walk_crate(&mut build_ast_visitor, crate, ());

            let jump_map_tmp = JumpMap::new();
            let mut build_jump_map_visitor = BuildJumpMapVisitor {
                code_map: session.codemap,
                ctxt: analysis.ty_cx,
                jump_map: jump_map_tmp,
            };
            visit::walk_crate(&mut build_jump_map_visitor, crate, ());

            let mut r = Response_Analyze::new();
            r.set_errors(errors.to_owned());
            r.set_ast(build_ast_visitor.ast);
            r.set_jump_map(build_jump_map_visitor.jump_map);
            r
        } {
            Ok(r) => r,
            Err(_) => {
                let mut r = Response_Analyze::new();
                while p.peek() {
                    r.add_errors(p.recv());
                }
                r
            }
        }
    }

    fn iteration(&mut self) {
        let req = protobuf::parse_length_delimited_from::<Request>(&mut self.coded_input);
        let mut resp = Response::new();
        if req.has_ping() {
            resp.mut_ping();
        } else if req.has_analyze() {
            resp.set_analyze(self.analyze(req.get_analyze()));
        } else {
            fail!("unknown request: %?", req);
        }
        resp.write_length_delimited_to_writer(self.output);
    }

    fn run(&mut self) {
        loop {
            self.iteration();
        }
    }
}

fn main() {
    let mut session = IdeSession::new();
    match os::args() {
        [_] => session.run(),
        [_, ~"debug", ~"analyze", program] => {
            let mut req = Request_Analyze::new();
            req.mut_file().set_name(~"foo.rs");
            req.mut_file().set_content(program);
            let resp = session.analyze(&req);
            println(fmt!("%?", resp));
        },
        _ => fail!("unknown args"),
    };
}
